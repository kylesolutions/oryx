[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Delivery Note",
  "enabled": 1,
  "modified": "2025-01-30 11:16:28.821363",
  "module": null,
  "name": "DN Qty Amount Calc",
  "script": "frappe.ui.form.on('Delivery Note', {\n\trefresh(frm) {\n\t\t// your code here\n\t}\n})\nfrappe.ui.form.on('Delivery Note Item', {\n    custom_delivered_qty: function(frm, cdt, cdn) {\n        update_delivered_qty_amount(frm, cdt, cdn);\n    },\n    rate: function(frm, cdt, cdn) {\n        update_delivered_qty_amount(frm, cdt, cdn);\n    }\n});\n\nfunction update_delivered_qty_amount(frm, cdt, cdn) {\n    let row = locals[cdt][cdn];\n    if (row.custom_delivered_qty && row.rate) {\n        row.custom_delivered_qty_amount = row.custom_delivered_qty * row.rate;\n        frm.refresh_field(\"items\");\n    }\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 0,
  "modified": "2025-04-03 15:51:27.080588",
  "module": null,
  "name": "Sales Invoice Button",
  "script": "// frappe.ui.form.on('Sales Invoice', {\n//     refresh: function (frm) {\n//         frm.add_custom_button('Generate', function () {\n//             frappe.call({\n//                 method: \"oryx.si.generate_sales_invoice\",\n//                 args: {\n//                     sales_invoice_name: frm.doc.name\n//                 },\n//                 callback: function (r) {\n//                     if (!r.exc) {\n//                         frappe.msgprint(__('Sales Invoice successfully created in Site B.'));\n//                     }\n//                 }\n//             });\n//         });\n//     }\n// });\n\n\n\nfrappe.ui.form.on('Sales Invoice', {\n    refresh: function(frm) {\n        frm.add_custom_button('Generate', function() {\n            frappe.call({\n                method: \"oryx.si.generate_sales_invoice\",\n                args: {\n                    sales_invoice_name: frm.doc.name\n                },\n                callback: function(r) {\n                    if (!r.exc) {\n                        frappe.msgprint(__('Sales Invoice successfully created in Site B.'));\n                        // Optionally, update the custom_reference_code field in the UI\n                        frm.set_value('custom_reference_code', r.message.naming_series);\n                    }\n                }\n            });\n        });\n    }\n});\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer",
  "enabled": 1,
  "modified": "2025-02-03 12:14:50.952731",
  "module": null,
  "name": "Customer Creation",
  "script": "\nfrappe.ui.form.on('Customer', {\n    refresh: function (frm) {\n        frm.add_custom_button('Generate', function () {\n            frappe.confirm(\n                __('Are you sure you want to create this customer in Site B?'),\n                function () {\n                    frappe.call({\n                        method: \"oryx.customer.generate_customer\",\n                        args: {\n                            customer_name: frm.doc.name\n                        },\n                        callback: function (r) {\n                            if (!r.exc) {\n                                frappe.msgprint(__('Customer successfully created in Site B.'));\n                            } else {\n                                frappe.msgprint(__('Failed to create customer in Site B.'));\n                            }\n                        }\n                    });\n                }\n            );\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "PO Form",
  "enabled": 1,
  "modified": "2025-03-12 08:54:20.345528",
  "module": null,
  "name": "Create PO",
  "script": "frappe.ui.form.on('PO Form', {\n    refresh: function(frm) {\n        if (!frm.is_new()) {\n            frm.add_custom_button(__('Create Purchase Order'), function() {\n                create_purchase_order(frm);\n            }, __('Actions'));\n        }\n    }\n});\n\nfunction create_purchase_order(frm) {\n    frappe.model.with_doctype('Purchase Order', function() {\n        let po = frappe.model.get_new_doc('Purchase Order');\n        po.transaction_date = frm.doc.date;\n        po.supplier = frm.doc.supplier;\n        po.custom_po_form = frm.doc.name;\n\n        frm.doc.items.forEach(row => {\n            let item = frappe.model.add_child(po, 'items');\n            item.item_code = row.item_code;\n            item.item_name = row.item_name;\n            item.uom = row.uom;\n            item.stock_uom = row.uom;\n            item.qty = row.qty;\n            item.schedule_date = frm.doc.date; // Default schedule date to PO Form date\n        });\n\n        frappe.set_route('Form', 'Purchase Order', po.name);\n    });\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "PO Form",
  "enabled": 1,
  "modified": "2025-03-12 18:10:52.277761",
  "module": null,
  "name": "Address Display PO Form",
  "script": "frappe.ui.form.on('PO Form', {\n    loading_point: function(frm) {\n        if (frm.doc.loading_point) {\n            frappe.call({\n                method: \"frappe.contacts.doctype.address.address.get_address_display\",\n                args: {\n                    \"address_dict\": frm.doc.loading_point\n                },\n                callback: function(r) {\n                    if (r.message) {\n                        frm.set_value('address_display', r.message);\n                    }\n                }\n            });\n        } else {\n            frm.set_value('address_display', '');\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "enabled": 1,
  "modified": "2025-03-18 09:14:50.679370",
  "module": null,
  "name": "Net Weight Calculation",
  "script": "frappe.ui.form.on('Purchase Receipt', {\n\trefresh(frm) {\n\t\t// your code here\n\t}\n})\n\nfrappe.ui.form.on('Oryx Vehicle Details', {\n\tbefore_loading: function(frm, cdt, cdn) {\n        calculate_net_weight(frm, cdt, cdn);\n    },\n    after_loading: function(frm, cdt, cdn) {\n        calculate_net_weight(frm, cdt, cdn);\n    },\n    net_weight: function(frm) {\n        calculate_total_net_weight(frm);\n    }\n})\nfunction calculate_net_weight(frm, cdt, cdn) {\n    let row = locals[cdt][cdn];\n    let before_loading = row.before_loading || 0;\n    let after_loading = row.after_loading || 0;\n\n    frappe.model.set_value(cdt, cdn, 'net_weight', after_loading - before_loading);\n    \n    calculate_total_net_weight(frm);  // Update total net weight\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "PO Form",
  "enabled": 0,
  "modified": "2025-06-03 12:14:19.017870",
  "module": null,
  "name": "PO Form",
  "script": "frappe.ui.form.on('PO Form', {\n    refresh: function(frm) {\n        if (!frm.is_new()) {\n            frm.add_custom_button(__('Create Purchase Order'), function() {\n                create_purchase_order(frm);\n            }, __('Actions'));\n            frm.add_custom_button(__('Create Bunker Delivery Order'), function() {\n                create_delivery_order(frm);\n            }, __('Actions'));\n        }\n    }\n});\n\nfunction create_purchase_order(frm) {\n    frappe.model.with_doctype('Purchase Order', function() {\n        let po = frappe.model.get_new_doc('Purchase Order');\n        po.transaction_date = frm.doc.date;\n        po.supplier = frm.doc.supplier;\n        po.custom_po_form = frm.doc.name;\n\n        let promises = frm.doc.item_details.map(row => {\n            return new Promise(resolve => {\n                frappe.db.get_value('Item', row.item_code, 'stock_uom').then(response => {\n                    let stock_uom = response.message.stock_uom || row.uom;\n                    let item = frappe.model.add_child(po, 'items');\n                    item.item_code = row.item_code;\n                    item.item_name = row.item_name;\n                    item.uom = row.uom;\n                    item.stock_uom = stock_uom;\n                    item.qty = row.qty;\n                    item.schedule_date = frm.doc.date;\n                    item.rate = row.rate;  \n                    resolve();\n                });\n            });\n        });\n\n        Promise.all(promises).then(() => {\n            frappe.set_route('Form', 'Purchase Order', po.name).then(() => {\n                setTimeout(() => {\n                    let po_doc = cur_frm.doc;\n                    po_doc.items.forEach((item, index) => {\n                        item.rate = frm.doc.item_details[index].rate;\n                    });\n                    cur_frm.refresh_field('items');\n                }, 500);\n            });\n        });\n    });\n}\n\nfunction create_delivery_order(frm) {\n    frappe.model.with_doctype('DO Form', function() {\n        let dn = frappe.model.get_new_doc('DO Form');\n        dn.date = frm.doc.date;\n        dn.po_form = frm.doc.name;\n        dn.with_vat = frm.doc.with_vat;\n\n        let promises = frm.doc.item_details.map(row => {\n            return new Promise(resolve => {\n                frappe.db.get_value('Item', row.item_code, 'stock_uom').then(response => {\n                    let stock_uom = response.message.stock_uom || row.uom;\n                    let item = frappe.model.add_child(dn, 'item_details');\n                    item.item_code = row.item_code;\n                    item.item_name = row.item_name;\n                    item.uom = row.uom;\n                    item.stock_uom = stock_uom;\n                    item.qty = row.qty;\n                    item.schedule_date = frm.doc.date;\n                    resolve();\n                });\n            });\n        });\n\n        Promise.all(promises).then(() => {\n            frm.doc.vehicle_details.forEach(row => {\n                let vehicle = frappe.model.add_child(dn, 'vehicle_details');\n                vehicle.vehicle = row.vehicle;\n                vehicle.driver = row.driver;\n                vehicle.warehouse = row.warehouse;\n                vehicle.loaded_qty = row.loaded_qty;\n                vehicle.meter_reading = row.meter_reading;\n                vehicle.before_loading = row.before_loading;\n                vehicle.after_loading = row.after_loading;\n                vehicle.net_weight = row.net_weight;\n            });\n\n            frappe.set_route('Form', 'DO Form', dn.name);\n        });\n    });\n}\n\n\n// frappe.ui.form.on('PO Form', {\n//     refresh: function(frm) {\n//         if (!frm.is_new()) {\n//             frm.add_custom_button(__('Create Purchase Order'), function() {\n//                 create_purchase_order(frm);\n//             }, __('Actions'));\n//             frm.add_custom_button(__('Create Delivery Order'), function() {\n//                 create_delivery_order(frm);\n//             }, __('Actions'));\n//         }\n//     }\n// });\n// function create_purchase_order(frm) {\n//     frappe.model.with_doctype('Purchase Order', function() {\n//         let po = frappe.model.get_new_doc('Purchase Order');\n//         po.transaction_date = frm.doc.date;\n//         po.supplier = frm.doc.supplier;\n//         po.custom_po_form = frm.doc.name;\n\n//         frm.doc.item_details.forEach(row => {\n//             let item = frappe.model.add_child(po, 'items');\n//             item.item_code = row.item_code;\n//             item.item_name = row.item_name;\n//             item.uom = row.uom;\n//             item.stock_uom = row.uom;\n//             item.qty = row.qty;\n//             item.schedule_date = frm.doc.date;\n//             item.rate = row.rate; \n//         });\n\n//         frappe.set_route('Form', 'Purchase Order', po.name).then(() => {\n//             setTimeout(() => {\n//                 let po_doc = cur_frm.doc;\n//                 po_doc.items.forEach((item, index) => {\n//                     item.rate = frm.doc.item_details[index].rate;\n//                 });\n//                 cur_frm.refresh_field('items');\n//             }, 500);\n//         });\n//     });\n// }\n\n\n\n// function create_delivery_order(frm) {\n//     frappe.model.with_doctype('DO Form', function() {\n//         let dn = frappe.model.get_new_doc('DO Form');\n//         dn.date = frm.doc.date;\n//         dn.custom_po_form = frm.doc.name;\n\n//         frm.doc.item_details.forEach(row => {\n//             let item = frappe.model.add_child(dn, 'item_details');\n//             item.item_code = row.item_code;\n//             item.item_name = row.item_name;\n//             item.uom = row.uom;\n//             item.qty = row.qty;\n//             item.schedule_date = frm.doc.date;\n//         });\n//         frm.doc.vehicle_details.forEach(row => {\n//             let vehicle = frappe.model.add_child(dn, 'vehicle_details');\n//             vehicle.vehicle = row.vehicle;\n//             vehicle.driver = row.driver;\n//             vehicle.warehouse = row.warehouse;\n//             vehicle.loaded_qty = row.loaded_qty;\n//             vehicle.meter_reading = row.meter_reading;\n//             vehicle.before_loading = row.before_loading;\n//             vehicle.after_loading = row.after_loading;\n//             vehicle.net_weight = row.net_weight;\n//         });\n//         frappe.set_route('Form', 'DO Form', dn.name);\n//     });\n// }",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "enabled": 1,
  "modified": "2025-03-18 12:54:18.106998",
  "module": null,
  "name": "Purchase Receipt Form",
  "script": "frappe.ui.form.on('Purchase Receipt', {\n    before_save: function(frm) {  // Trigger before saving the record\n        if (frm.doc.custom_po_form) {\n            fetch_vehicle_details(frm);\n        }\n    }\n});\n\nfunction fetch_vehicle_details(frm) {\n    frappe.call({\n        method: 'frappe.client.get',\n        args: {\n            doctype: 'PO Form',  // Replace with your actual custom Doctype name\n            name: frm.doc.custom_po_form\n        },\n        async: false,  // Ensures the data is fetched before saving\n        callback: function(response) {\n            if (response.message) {\n                let po_data = response.message;\n\n                // Clear existing child table entries to prevent duplicates\n                frm.clear_table('custom_vehicle_details');\n\n                // Loop through vehicle_details from PO Form and add to Purchase Receipt\n                (po_data.vehicle_details || []).forEach(row => {\n                    let new_row = frm.add_child('custom_vehicle_details');\n                    new_row.vehicle = row.vehicle;\n                    new_row.driver = row.driver;\n                    new_row.warehouse = row.warehouse;\n                    new_row.loaded_qty = row.loaded_qty;\n                    new_row.meter_reading = row.meter_reading;\n                    new_row.before_loading = row.before_loading;\n                    new_row.after_loading = row.after_loading;\n                    new_row.net_weight = row.net_weight;\n                });\n\n                frm.refresh_field('custom_vehicle_details');\n            }\n        }\n    });\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "PO Form",
  "enabled": 1,
  "modified": "2025-03-18 10:32:10.840283",
  "module": null,
  "name": "Address Display",
  "script": "frappe.ui.form.on('PO Form', {\n    loading_point: function(frm) {\n        if (frm.doc.loading_point) {\n            frappe.call({\n                method: \"frappe.contacts.doctype.address.address.get_address_display\",\n                args: {\n                    \"address_dict\": frm.doc.loading_point\n                },\n                callback: function(r) {\n                    if (r.message) {\n                        frm.set_value('address_display', r.message);\n                    }\n                }\n            });\n        } else {\n            frm.set_value('address_display', '');\n        }\n    }});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "PO Form",
  "enabled": 1,
  "modified": "2025-03-18 10:56:08.844733",
  "module": null,
  "name": "Net weight Caliculation PO Form",
  "script": "frappe.ui.form.on('PO Form', {\n\trefresh(frm) {\n\t\t// your code here\n\t}\n})\nfrappe.ui.form.on('Oryx Vehicle Details', {\n\tbefore_loading: function(frm, cdt, cdn) {\n        calculate_net_weight(frm, cdt, cdn);\n    },\n    after_loading: function(frm, cdt, cdn) {\n        calculate_net_weight(frm, cdt, cdn);\n    },\n    net_weight: function(frm) {\n        calculate_total_net_weight(frm);\n    }\n})\nfunction calculate_net_weight(frm, cdt, cdn) {\n    let row = locals[cdt][cdn];\n    let before_loading = row.before_loading || 0;\n    let after_loading = row.after_loading || 0;\n\n    frappe.model.set_value(cdt, cdn, 'net_weight', after_loading - before_loading);\n    \n    calculate_total_net_weight(frm);  // Update total net weight\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "PO Form",
  "enabled": 1,
  "modified": "2025-03-18 11:02:30.150529",
  "module": null,
  "name": "Address Display PO Form Item Table",
  "script": "frappe.ui.form.on('PO Form', {\n\trefresh(frm) {\n\t\t// your code here\n\t}\n})\nfrappe.ui.form.on('Oryx Vehicle Details', {\n    loading_point: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        if (row.loading_point) {\n            frappe.call({\n                method: \"frappe.contacts.doctype.address.address.get_address_display\",\n                args: {\n                    \"address_dict\": row.loading_point\n                },\n                callback: function(r) {\n                    if (r.message) {\n                        frappe.model.set_value(cdt, cdn, 'address_display', r.message);\n                    }\n                }\n            });\n        } else {\n            frappe.model.set_value(cdt, cdn, 'address_display', '');\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "DO Form",
  "enabled": 0,
  "modified": "2025-06-03 12:14:19.155381",
  "module": null,
  "name": "Create SO from Do Form",
  "script": "frappe.ui.form.on('DO Form', {\n    refresh: function(frm) {\n        if (!frm.is_new()) {\n            frm.add_custom_button(__('Create Sales Order'), function() {\n                create_sales_order(frm);\n            }, __('Actions'));\n        }\n    }\n});\nfunction create_sales_order(frm) {\n    frappe.model.with_doctype('Sales Order', function() {\n        let so = frappe.model.get_new_doc('Sales Order');\n        so.transaction_date = frm.doc.date;\n        so.customer = frm.doc.customer;\n        so.custom_do_form = frm.doc.name;\n        so.po_no = frm.doc.po_no;\n        so.po_date = frm.doc.po_date;\n        so.custom_ship = frm.doc.ship_name;\n        so.custom_berth_no = frm.doc.berth_no;\n        so.delivery_date = frm.doc.delivery_date;\n        so.custom_mode_of_supply = frm.doc.mode_of_supply;\n        so.custom_arrange_surveyor = frm.doc.arrange_surveyor;\n        frm.doc.item_details.forEach(row => {\n            let item = frappe.model.add_child(so, 'items');\n            item.item_code = row.item_code;\n            item.item_name = row.item_name;\n            item.uom = row.uom;\n            item.qty = row.qty;\n            item.rate = row.rate;\n            item.schedule_date = frm.doc.date; // Default schedule date to PO Form date\n        });\n        frappe.set_route('Form', 'Sales Order', so.name);\n    });\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "DO Form",
  "enabled": 1,
  "modified": "2025-03-18 14:12:54.572478",
  "module": null,
  "name": "Address Display Do Form",
  "script": "frappe.ui.form.on('DO Form', {\n    loading_point: function(frm) {\n        if (frm.doc.loading_point) {\n            frappe.call({\n                method: \"frappe.contacts.doctype.address.address.get_address_display\",\n                args: {\n                    \"address_dict\": frm.doc.loading_point\n                },\n                callback: function(r) {\n                    if (r.message) {\n                        frm.set_value('address_display', r.message);\n                    }\n                }\n            });\n        } else {\n            frm.set_value('address_display', '');\n        }\n    }});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "DO Form",
  "enabled": 1,
  "modified": "2025-03-18 14:14:51.982612",
  "module": null,
  "name": "Address Display Do Form Item Table",
  "script": "frappe.ui.form.on('DO Form', {\n\trefresh(frm) {\n\t\t// your code here\n\t}\n})\n\nfrappe.ui.form.on('DO Vehicle Details', {\n\t   loading_point: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        if (row.loading_point) {\n            frappe.call({\n                method: \"frappe.contacts.doctype.address.address.get_address_display\",\n                args: {\n                    \"address_dict\": row.loading_point\n                },\n                callback: function(r) {\n                    if (r.message) {\n                        frappe.model.set_value(cdt, cdn, 'address_display', r.message);\n                    }\n                }\n            });\n        } else {\n            frappe.model.set_value(cdt, cdn, 'address_display', '');\n        }\n    }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Delivery Note",
  "enabled": 1,
  "modified": "2025-03-19 11:05:09.771602",
  "module": null,
  "name": "Script for auto calculating Weight Before Loading",
  "script": "frappe.ui.form.on('Delivery Note Item', {\n    custom_meter_reading_before: function(frm, cdt, cdn) {\n        calculate_loading_weights(frm, cdt, cdn);\n    },\n    custom_meter_reading_after: function(frm, cdt, cdn) {\n        calculate_loading_weights(frm, cdt, cdn);\n    },\n    custom_default_item_weight: function(frm, cdt, cdn) {\n        calculate_loading_weights(frm, cdt, cdn);\n    },\n    custom_default_vehicle_weight: function(frm, cdt, cdn) {\n        calculate_loading_weights(frm, cdt, cdn);\n    }\n});\n\nfunction calculate_loading_weights(frm, cdt, cdn) {\n    let item = locals[cdt][cdn];\n\n    let meter_reading_before = flt(item.custom_meter_reading_before);\n    let meter_reading_after = flt(item.custom_meter_reading_after);\n    let item_weight = flt(item.custom_default_item_weight);\n    let vehicle_weight = flt(item.custom_default_vehicle_weight);\n\n    // Calculate Before Loading Weight\n    item.custom_before_loading_weight = (meter_reading_before * item_weight) + vehicle_weight;\n\n    // Calculate After Loading Weight\n    item.custom_after_loading_weight = (meter_reading_after * item_weight) + vehicle_weight;\n\n    frm.refresh_field('items');\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Goods Receive Trip",
  "enabled": 1,
  "modified": "2025-03-24 10:08:58.609785",
  "module": null,
  "name": "Auto Calculate Weight",
  "script": "frappe.ui.form.on('Goods Receive Trip', {\n    meter_readingbl: function(frm) {\n        calculate_loading_weights(frm);\n    },\n    meter_readingal: function(frm) {\n        calculate_loading_weights(frm);\n    },\n    default_vehicle_weight: function(frm) {\n        calculate_loading_weights(frm);\n    },\n    default_item_weight: function(frm) {\n        calculate_loading_weights(frm);\n    }\n});\n\nfunction calculate_loading_weights(frm) {\n    let meter_readingbl = flt(frm.doc.meter_readingbl);\n    let meter_readingal = flt(frm.doc.meter_readingal);\n    let item_weight = flt(frm.doc.default_item_weight);\n    let vehicle_weight = flt(frm.doc.default_vehicle_weight);\n\n    // Calculate Before Loading Weight\n    let weightbl = (meter_readingbl * item_weight) + vehicle_weight;\n    frm.set_value(\"weightbl\", weightbl);\n\n    // Calculate After Loading Weight\n    let weightal = (meter_readingal * item_weight) + vehicle_weight;\n    frm.set_value(\"weightal\", weightal);\n\n    // Calculate Net Weight\n    let net_weight = weightal - weightbl;\n    frm.set_value(\"net_weight\", net_weight);\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "DO Form",
  "enabled": 1,
  "modified": "2025-03-25 10:24:11.855320",
  "module": null,
  "name": "DO Form Net Weight",
  "script": "frappe.ui.form.on('DO Form', {\n\trefresh(frm) {\n\t\t// your code here\n\t}\n})\nfrappe.ui.form.on('DO Vehicle Details', {\n    before_loading: function(frm, cdt, cdn) {\n        calculate_net_weight(frm, cdt, cdn);\n    },\n    after_loading: function(frm, cdt, cdn) {\n        calculate_net_weight(frm, cdt, cdn);\n    },\n    net_weight: function(frm, cdt, cdn) {\n        calculate_total_net_weight(frm);\n    }\n});\n\nfunction calculate_net_weight(frm, cdt, cdn) {\n    let row = locals[cdt][cdn];  // Get the child table row\n\n    let before_loading = flt(row.before_loading) || 0; // Ensure number\n    let after_loading = flt(row.after_loading) || 0;\n\n    let net_weight = after_loading - before_loading;\n\n    frappe.model.set_value(cdt, cdn, 'net_weight', net_weight);  // Set net weight\n\n    calculate_total_net_weight(frm); // Update total net weight in parent form\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Goods Receive Trip",
  "enabled": 0,
  "modified": "2025-06-03 12:14:18.928626",
  "module": null,
  "name": "Address Display GRT",
  "script": "frappe.ui.form.on('Goods Receive Trip', {\n    loading_point: function(frm) {\n        if (frm.doc.loading_point) {\n            frappe.call({\n                method: \"frappe.contacts.doctype.address.address.get_address_display\",\n                args: {\n                    \"address_dict\": frm.doc.loading_point\n                },\n                callback: function(r) {\n                    if (r.message) {\n                        frm.set_value('address', r.message);\n                    }\n                }\n            });\n        } else {\n            frm.set_value('address', '');\n        }\n    }});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Delivery Note",
  "enabled": 0,
  "modified": "2025-06-03 12:14:18.975104",
  "module": null,
  "name": "Vehicle Details in Delivery Note",
  "script": "\n\n\n\n\n// frappe.ui.form.on('Delivery Note', {\n//     before_save: function(frm) {\n//         if (frm.doc.custom_do_form) {\n//             console.log(\"Fetching DO Form:\", frm.doc.custom_do_forms);\n//             fetch_vehicle_details(frm);\n//         } else {\n//             console.warn(\"custom_do_forms is empty, skipping fetch.\");\n//         }\n//     }\n// });\n\n// function fetch_vehicle_details(frm) {\n//     frappe.call({\n//         method: 'frappe.client.get',\n//         args: {\n//             doctype: 'DO Form',  \n//             name: frm.doc.custom_do_forms\n//         },\n//         async: false,\n//         callback: function(response) {\n//             if (response.message) {\n//                 let do_data = response.message;\n//                 frm.clear_table('items');\n\n//                 (do_data.vehicle_details || []).forEach(vehicle_row => {\n//                     (do_data.item_details || []).forEach(item_row => {\n//                         let new_row = frm.add_child('items');\n\n//                         // Vehicle & Driver Information\n//                         new_row.custom_vehicle = vehicle_row.vehicle;\n//                         new_row.custom_driver = vehicle_row.driver;\n//                         new_row.warehouse = vehicle_row.warehouse;\n//                         new_row.custom_meter_reading_before = vehicle_row.meter_reading;\n//                         new_row.custom_before_loading_weight = vehicle_row.before_loading;\n//                         new_row.custom_meter_reading_after = vehicle_row.meter_readingal;\n//                         new_row.custom_after_loading_weight = vehicle_row.after_loading;\n//                         new_row.custom_delivered_qty = vehicle_row.delivered_qty;\n\n//                         // Item Details\n//                         new_row.item_code = item_row.item_code;\n//                         new_row.item_name = item_row.item_name;\n//                         new_row.uom = item_row.uom;\n//                         new_row.qty = item_row.qty;\n//                         new_row.rate = item_row.rate;\n//                         new_row.amount = item_row.amount;\n//                         new_row.custom_delivered_qty = item_row.loaded_qty;\n                       \n\n//                         // Ensure Stock UOM & Conversion Factor are populated\n//                         new_row.stock_uom = item_row.stock_uom || \"\";\n//                         new_row.conversion_factor = item_row.conversion_factor || 1;\n\n//                         // Fetch missing fields from Item master if needed\n//                         if (!new_row.stock_uom || !new_row.conversion_factor) {\n//                             frappe.call({\n//                                 method: 'frappe.client.get',\n//                                 args: {\n//                                     doctype: 'Item',\n//                                     name: item_row.item_code\n//                                 },\n//                                 async: false,\n//                                 callback: function(item_response) {\n//                                     if (item_response.message) {\n//                                         new_row.stock_uom = new_row.stock_uom || item_response.message.stock_uom;\n//                                         new_row.conversion_factor = new_row.conversion_factor || 1;\n//                                     }\n//                                 }\n//                             });\n//                         }\n//                     });\n//                 });\n\n//                 frm.refresh_field('items');\n//             } else {\n//                 console.warn(\"No data found for DO Form:\", frm.doc.custom_do_forms);\n//             }\n//         },\n//         error: function(err) {\n//             console.error(\"Error fetching DO Form:\", err);\n//         }\n//     });\n// }\n\n\n\n\n\n// frappe.ui.form.on('Delivery Note', {\n//     before_save: function(frm) {\n//         if (frm.doc.custom_do_form) {\n//             console.log(\"Fetching DO Form:\", frm.doc.custom_do_form);\n//             fetch_vehicle_details(frm);\n//         } else {\n//             console.warn(\"custom_do_form is empty, skipping fetch.\");\n//         }\n//     }\n// });\n\n// function fetch_vehicle_details(frm) {\n//     frappe.call({\n//         method: 'frappe.client.get',\n//         args: {\n//             doctype: 'DO Form',\n//             name: frm.doc.custom_do_form\n//         },\n//         async: false,\n//         callback: function(response) {\n//             if (response.message) {\n//                 let do_data = response.message;\n//                 frm.clear_table('items');\n\n//                 (do_data.vehicle_details || []).forEach(vehicle_row => {\n//                     (do_data.item_details || []).forEach(item_row => {\n//                         let new_row = frm.add_child('items');\n\n//                         // Vehicle & Driver Information\n//                         new_row.custom_vehicle = vehicle_row.vehicle;\n//                         new_row.custom_driver = vehicle_row.driver;\n//                         new_row.warehouse = vehicle_row.warehouse;\n//                         new_row.custom_meter_reading_before = vehicle_row.meter_reading;\n//                         new_row.custom_before_loading_weight = vehicle_row.before_loading;\n//                         new_row.custom_meter_reading_after = vehicle_row.meter_readingal;\n//                         new_row.custom_after_loading_weight = vehicle_row.after_loading;\n//                         new_row.loading_point = vehicle_row.loading_point\n//                         new_row.address_display = vehicle_row.address_display\n//                         new_row.qty = vehicle_row.loaded_qty; \n\n//                         // Item Details\n//                         new_row.item_code = item_row.item_code;\n//                         new_row.item_name = item_row.item_name;\n//                         new_row.uom = item_row.uom;\n//                         new_row.rate = item_row.rate;\n//                         new_row.amount = item_row.amount;\n//                         new_row.custom_loading_uom = item_row.uom;\n\n//                         // Fetch delivered quantity from item_row (not vehicle_row)\n                        \n//                         // Ensure Stock UOM & Conversion Factor are populated\n//                         new_row.stock_uom = item_row.stock_uom || \"\";\n//                         new_row.conversion_factor = item_row.conversion_factor || 1;\n\n//                         // Fetch missing fields from Item master if needed\n//                         if (!new_row.stock_uom || !new_row.conversion_factor) {\n//                             frappe.call({\n//                                 method: 'frappe.client.get',\n//                                 args: {\n//                                     doctype: 'Item',\n//                                     name: item_row.item_code\n//                                 },\n//                                 async: false,\n//                                 callback: function(item_response) {\n//                                     if (item_response.message) {\n//                                         new_row.stock_uom = new_row.stock_uom || item_response.message.stock_uom;\n//                                         new_row.conversion_factor = new_row.conversion_factor || 1;\n//                                     }\n//                                 }\n//                             });\n//                         }\n//                     });\n//                 });\n\n//                 frm.refresh_field('items');\n//             } else {\n//                 console.warn(\"No data found for DO Form:\", frm.doc.custom_do_form);\n//             }\n//         },\n//         error: function(err) {\n//             console.error(\"Error fetching DO Form:\", err);\n//         }\n//     });\n// }\n\n\n\n\n\n\n\n\n\nfrappe.ui.form.on('Delivery Note', {\n    before_save: function(frm) {\n        if (frm.doc.custom_do_form) {\n            fetch_vehicle_details(frm);\n        }\n    }\n});\n\nfunction fetch_vehicle_details(frm) {\n    frappe.call({\n        method: 'frappe.client.get',\n        args: {\n            doctype: 'DO Form',\n            name: frm.doc.custom_do_form\n        },\n        callback: function(response) {\n            if (response.message) {\n                let do_data = response.message;\n                frm.clear_table('items');\n\n                (do_data.vehicle_details || []).forEach(vehicle_row => {\n                    (do_data.item_details || []).forEach(item_row => {\n                        let new_row = frm.add_child('items');\n\n                        // Vehicle Info\n                        new_row.custom_vehicle = vehicle_row.vehicle;\n                        new_row.custom_driver = vehicle_row.driver;\n                        new_row.warehouse = vehicle_row.warehouse;\n                        new_row.custom_meter_reading_before = vehicle_row.meter_reading;\n                        new_row.custom_before_loading_weight = vehicle_row.before_loading;\n                        new_row.custom_meter_reading_after = vehicle_row.meter_reading_after;\n                        new_row.custom_after_loading_weight = vehicle_row.after_loading;\n                        new_row.loading_point = vehicle_row.loading_point;\n                        new_row.address_display = vehicle_row.address_display;\n\n                        // Item Info\n                        new_row.item_code = item_row.item_code;\n                        new_row.item_name = item_row.item_name;\n                        new_row.uom = item_row.uom;\n                        new_row.rate = item_row.rate;\n                        new_row.amount = item_row.amount;\n                        new_row.qty = vehicle_row.loaded_qty;  // Or item_row.qty if preferred\n                        new_row.custom_loading_uom = item_row.uom;\n\n                        // Stock Info\n                        new_row.stock_uom = item_row.stock_uom || \"\";\n                        new_row.conversion_factor = item_row.conversion_factor || 1;\n\n                        // Fallback: Fetch from Item master\n                        if (!new_row.stock_uom || !new_row.conversion_factor) {\n                            frappe.call({\n                                method: 'frappe.client.get',\n                                args: {\n                                    doctype: 'Item',\n                                    name: item_row.item_code\n                                },\n                                callback: function(item_response) {\n                                    if (item_response.message) {\n                                        frappe.model.set_value(new_row.doctype, new_row.name, 'stock_uom', item_response.message.stock_uom);\n                                        frappe.model.set_value(new_row.doctype, new_row.name, 'conversion_factor', 1);\n                                    }\n                                }\n                            });\n                        }\n                    });\n                });\n\n                frm.refresh_field('items');\n            } else {\n                frappe.msgprint(__('DO Form not found: ') + frm.doc.custom_do_form);\n            }\n        }\n    });\n}\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Goods Receive Trip",
  "enabled": 1,
  "modified": "2025-03-26 09:36:29.979453",
  "module": null,
  "name": "GRT Net Weight",
  "script": "frappe.ui.form.on('Goods Receive Trip', {\n\trefresh(frm) {\n\t\t// your code here\n\t}\n})\nfrappe.ui.form.on('Goods Receive Trip', {\n    weightbl: function(frm, cdt, cdn) {\n        calculate_net_weight(frm, cdt, cdn);\n    },\n    weightal: function(frm, cdt, cdn) {\n        calculate_net_weight(frm, cdt, cdn);\n    },\n    net_weight: function(frm, cdt, cdn) {\n        calculate_total_net_weight(frm);\n    }\n});\n\nfunction calculate_net_weight(frm, cdt, cdn) {\n    let row = locals[cdt][cdn];  // Get the child table row\n\n    let weightbl = flt(row.weightbl) || 0; // Ensure number\n    let weightal = flt(row.weightal) || 0;\n\n    let net_weight = weightal - weightbl;\n\n    frappe.model.set_value(cdt, cdn, 'net_weight', net_weight);  // Set net weight\n\n    calculate_total_net_weight(frm); // Update total net weight in parent form\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Oryx Delivery Trip",
  "enabled": 1,
  "modified": "2025-03-26 13:04:50.959507",
  "module": null,
  "name": "Oryx Delivery Trip Update Button",
  "script": "frappe.ui.form.on('Oryx Delivery Trip', {\n  refresh: function (frm) {\n    frm.add_custom_button(__('Update'), function () {\n      frappe.call({\n        method: \"oryx.oryx.doctype.oryx_delivery_trip.oryx_delivery_trip.update_oryx_trip\",\n        args: {\n          trip_name: frm.doc.name  // Correct argument name\n        },\n        callback: function (response) {\n          if (response.message) {\n            frappe.msgprint(response.message);\n          }\n        }\n      });\n    });\n  }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Delivery Note",
  "enabled": 0,
  "modified": "2025-06-03 12:14:18.812060",
  "module": null,
  "name": "Warehouse Fetch In Delivery Note",
  "script": "// frappe.ui.form.on('Delivery Note Item', {\n//     vehicle: function(frm, cdt, cdn) {\n//         let row = locals[cdt][cdn];\n\n//         if (row.vehicle) {\n//             frappe.call({\n//                 method: 'frappe.client.get_value',\n//                 args: {\n//                     doctype: 'Vehicle',\n//                     filters: { name: row.vehicle },\n//                     fieldname: ['custom_warehouse']  // Use correct field name\n//                 },\n//                 callback: function(response) {\n//                     console.log(\"Fetched Warehouse:\", response.message);  // Debugging log\n\n//                     if (response.message && response.message.warehouse) {\n//                         frappe.model.set_value(cdt, cdn, 'warehouse', response.message.warehouse);\n//                     } else {\n//                         frappe.msgprint(__('No warehouse assigned to this vehicle.'));\n//                     }\n//                 }\n//             });\n//         }\n//     }\n// });\n\n\n\n\n// frappe.ui.form.on('Delivery Note Item', {\n//     vehicle: function(frm, cdt, cdn) {\n//         let row = locals[cdt][cdn];\n\n//         if (row.vehicle) {\n//             console.log(\"Fetching custom_warehouse for vehicle:\", row.vehicle);\n\n//             frappe.call({\n//                 method: 'frappe.client.get_value',\n//                 args: {\n//                     doctype: 'Vehicle',\n//                     filters: { name: row.vehicle },\n//                     fieldname: ['custom_warehouse']\n//                 },\n//                 callback: function(response) {\n//                     console.log(\"Response from Vehicle:\", response.message);\n//                     console.log(\"Fetched Warehouse:\", response.message);\n\n//                     if (response.message && response.message.warehouse) {\n//                         frappe.model.set_value(cdt, cdn, 'warehouse', response.message.warehouse);\n//                         console.log(\"Set warehouse:\", response.message.warehouse);\n//                     } else {\n//                         frappe.msgprint(__('No warehouse assigned to this vehicle.'));\n//                         frappe.model.set_value(cdt, cdn, 'warehouse', '');\n//                     }\n//                 }\n//             });\n//         } else {\n//             frappe.model.set_value(cdt, cdn, 'warehouse', '');\n//         }\n//     }\n// });\n\nfrappe.ui.form.on('Delivery Note Item', {\n    vehicle: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n\n        if (row.vehicle) {\n            console.log(\"Fetching custom_warehouse for vehicle:\", row.vehicle);\n\n            frappe.call({\n                method: 'frappe.client.get_value',\n                args: {\n                    doctype: 'Vehicle',\n                    filters: { name: row.vehicle },\n                    fieldname: ['custom_warehouse']\n                },\n                callback: function(response) {\n                    console.log(\"Response from Vehicle:\", response.message);\n\n                    if (response.message && response.message.custom_warehouse) {\n                        frappe.model.set_value(cdt, cdn, 'warehouse', response.message.custom_warehouse);\n                        console.log(\"Set warehouse:\", response.message.custom_warehouse);\n                    } else {\n                        frappe.msgprint(__('No warehouse assigned to this vehicle.'));\n                        frappe.model.set_value(cdt, cdn, 'warehouse', '');\n                    }\n                }\n            });\n        } else {\n            frappe.model.set_value(cdt, cdn, 'warehouse', '');\n        }\n    }\n});\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 0,
  "modified": "2025-06-19 09:20:50.244342",
  "module": "Oryx",
  "name": "Auto Create SI",
  "script": "frappe.ui.form.on('Sales Invoice', {\n    refresh: function(frm) {\n        // Check if the invoice is submitted and custom_reference_code is empty\n        if (frm.doc.docstatus === 1 && !frm.doc.custom_reference_code) {\n            frm.add_custom_button('Generate', function() {\n                frappe.call({\n                    method: \"oryx.si.generate_sales_invoice\",\n                    args: {\n                        sales_invoice_name: frm.doc.name\n                    },\n                    callback: function(r) {\n                        if (!r.exc) {\n                            frappe.msgprint(__('Sales Invoice successfully created in Site B.'));\n                            // Update the custom_reference_code field in the UI\n                            if (r.message && r.message.naming_series) {\n                                frm.set_value('custom_reference_code', r.message.naming_series);\n                                frm.refresh_field('custom_reference_code');\n                            }\n                        }\n                    }\n                });\n            }).addClass('btn-primary'); // Optional: Add styling to highlight the button\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item",
  "enabled": 0,
  "modified": "2025-06-19 09:20:50.276403",
  "module": "Oryx",
  "name": "Item Creation",
  "script": "frappe.ui.form.on('Item', {\n    refresh: function(frm) {\n        frm.add_custom_button('Generate', function() {\n            frappe.call({\n                method: \"oryx.item.generate_item\", // Backend Python method\n                args: {\n                    item_code: frm.doc.name // Send current item's code\n                },\n                callback: function(r) {\n                    if (!r.exc) {\n                        frappe.msgprint(__('Item successfully created in Site B.'));\n                    } else {\n                        frappe.msgprint(__('There was an error creating the Item in Site B.'));\n                    }\n                }\n            });\n        });\n    }\n});\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Journal Entry",
  "enabled": 0,
  "modified": "2025-06-19 09:20:50.302077",
  "module": "Oryx",
  "name": "JV Creation",
  "script": "frappe.ui.form.on('Journal Entry', {\n    refresh: function(frm) {\n        if (frm.doc.docstatus === 1) { // Only show button if submitted\n            frm.add_custom_button('Generate', function() {\n                frappe.call({\n                    method: \"oryx.jv.generate_journal_entry\",\n                    args: {\n                        journal_entry_name: frm.doc.name\n                    },\n                    callback: function(r) {\n                        if (!r.exc) {\n                            frappe.msgprint(__('Journal Entry successfully created in Site B.'));\n                        } else {\n                            frappe.msgprint(__('There was an error creating the Journal Entry in Site B.'));\n                        }\n                    }\n                });\n            });\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Supplier",
  "enabled": 0,
  "modified": "2025-06-19 09:20:50.330765",
  "module": "Oryx",
  "name": "Supplier Creation",
  "script": "frappe.ui.form.on('Supplier', {\n    refresh: function(frm) {\n            frm.add_custom_button('Generate', function() {\n                frappe.call({\n                    method: \"oryx.supplier.generate_supplier\",\n                    args: {\n                        supplier_name: frm.doc.name\n                    },\n                    callback: function(r) {\n                        if (!r.exc) {\n                            frappe.msgprint(__('Supplier, Contacts, and Addresses created in Site B.'));\n                        } else {\n                            frappe.msgprint(__('Error while syncing to Site B.'));\n                        }\n                    }\n                });\n            });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Invoice",
  "enabled": 0,
  "modified": "2025-06-19 09:20:50.358499",
  "module": "Oryx",
  "name": "Purchase Invoice Creation",
  "script": "frappe.ui.form.on('Purchase Invoice', {\n    refresh: function(frm) {\n        if (frm.doc.docstatus === 1) { // Only after submission\n            frm.add_custom_button('Generate on Site B', function() {\n                frappe.call({\n                    method: \"oryx.pi.generate_purchase_invoice\", // Adjust your app path\n                    args: {\n                        purchase_invoice_name: frm.doc.name\n                    },\n                    callback: function(r) {\n                        if (!r.exc) {\n                            frappe.msgprint(__('Purchase Invoice successfully created in Site B.'));\n                        } else {\n                            frappe.msgprint(__('Error while syncing Purchase Invoice to Site B.'));\n                        }\n                    }\n                });\n            });\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Payment Entry",
  "enabled": 0,
  "modified": "2025-06-19 09:20:50.384377",
  "module": "Oryx",
  "name": "Payment Entry Creation",
  "script": "frappe.ui.form.on('Payment Entry', {\n    refresh: function(frm) {\n        if (frm.doc.docstatus === 1) { // Show only after Submit\n            frm.add_custom_button('Generate', function () {\n                frappe.call({\n                    method: 'oryx.pe.generate_payment_entry', // Adjust path to your app\n                    args: {\n                        payment_entry_name: frm.doc.name\n                    },\n                    callback: function (r) {\n                        if (!r.exc) {\n                            frappe.msgprint(__('Payment Entry successfully created in Site B.'));\n                        } else {\n                            frappe.msgprint(__('Error while syncing Payment Entry to Site B.'));\n                        }\n                    }\n                });\n            });\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Account",
  "enabled": 0,
  "modified": "2025-06-03 12:14:19.291903",
  "module": null,
  "name": "Account Creation",
  "script": "frappe.ui.form.on('Account', {\n    refresh: function(frm) {\n            frm.add_custom_button('Generate on Site B', function () {\n                frappe.call({\n                    method: 'oryx.accounts.generate_account',  // Adjust path if needed\n                    args: {\n                        account_name: frm.doc.name\n                    },\n                    callback: function (r) {\n                        if (!r.exc) {\n                            frappe.msgprint(__('Account successfully created in Site B.'));\n                        } else {\n                            frappe.msgprint(__('Failed to sync Account to Site B.'));\n                        }\n                    }\n                });\n            });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Address",
  "enabled": 0,
  "modified": "2025-06-03 12:14:19.263511",
  "module": null,
  "name": "Address Title Fetching",
  "script": "// frappe.ui.form.on('Address', {\n// custom_port: function(frm) {\n//         if (frm.doc.custom_port) {\n//             frm.set_value('address_title', frm.doc.custom_port);\n//         }\n//     }\n// })\n\n// frappe.ui.form.on('Address', {\n//     validate: function(frm) {\n//         if (frm.doc.custom_port && !frm.doc.address_title) {\n//             frm.set_value('address_title', frm.doc.custom_port);\n//         }\n//     }\n// });\n\n\nfrappe.ui.form.on('Address', {\n    validate: function(frm) {\n        if (frm.doc.custom_port) {\n            if (!frm.doc.address_title) {\n                frm.set_value('address_title', frm.doc.custom_port);\n            }\n            // if (!frm.doc.address_line1) {\n            //     frm.set_value('address_line1', 'Auto-generated address for ' + frm.doc.custom_port);\n            // }\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "PO Form",
  "enabled": 0,
  "modified": "2025-06-03 12:14:19.230085",
  "module": null,
  "name": "PO Form Auto Fetch",
  "script": "// frappe.ui.form.on('PO Form', {\n//     onload: function(frm) {\n//         set_uom_from_vehicle(frm);\n//     }\n// });\n\n// function set_uom_from_vehicle(frm) {\n//     if (frm.doc.vehicle_details && frm.doc.vehicle_details.length > 0) {\n//         let vehicle_uom = frm.doc.vehicle_details[0].uom;\n//         if (vehicle_uom) {\n//             frm.doc.item_details.forEach(row => {\n//                 row.uom = vehicle_uom;\n//             });\n//             frm.refresh_field('item_details');\n//         }\n//     }\n// }\n\n\n// frappe.ui.form.on('Oryx Vehicle Details', {\n// \trefresh(frm) {\n// \t\t// your code here\n// \t}\n// })\n\n// frappe.ui.form.on('Item Details', {\n//     uom: function(frm, cdt, cdn) {\n//         update_vehicle_uom(frm);\n//     },\n//     item_details_add: function(frm, cdt, cdn) {\n//         update_vehicle_uom(frm);\n//     }\n// });\n\n// frappe.ui.form.on('PO Form', {\n//     onload: function(frm) {\n//         update_vehicle_uom(frm);\n//     }\n// });\n\n// function update_vehicle_uom(frm) {\n//     if (!frm.doc.item_details || frm.doc.item_details.length === 0) {\n//         return;\n//     }\n\n//     // Get UOM from the first row in item_details\n//     let first_item_row = frm.doc.item_details[0];\n\n//     if (first_item_row.uom) {\n//         (frm.doc.vehicle_details || []).forEach(row => {\n//             frappe.model.set_value(row.doctype, row.name, 'uom', first_item_row.uom);\n//         });\n\n//         frm.refresh_field('vehicle_details');\n//     }\n// }\n\n\nfrappe.ui.form.on('Item Details', {\n    uom: function(frm, cdt, cdn) {\n        update_vehicle_uom(frm);\n    },\n    item_details_add: function(frm, cdt, cdn) {\n        update_vehicle_uom(frm);\n    }\n});\n\nfrappe.ui.form.on('PO Form', {\n    onload: function(frm) {\n        update_vehicle_uom(frm);\n    },\n    before_save: function(frm) {  \n        update_vehicle_uom(frm);\n    }\n});\n\nfunction update_vehicle_uom(frm) {\n    if (!frm.doc.item_details || frm.doc.item_details.length === 0) {\n        return;\n    }\n\n    // Get UOM from the first row in item_details\n    let first_item_row = frm.doc.item_details[0];\n\n    if (first_item_row.uom) {\n        (frm.doc.vehicle_details || []).forEach(row => {\n            frappe.model.set_value(row.doctype, row.name, 'uom', first_item_row.uom);\n        });\n\n        // Ensure field refresh so UI updates without needing manual refresh\n        frm.refresh_field('vehicle_details');\n    }\n}\n\n\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "PO Form",
  "enabled": 0,
  "modified": "2025-06-03 12:14:19.192304",
  "module": null,
  "name": "PO Form Fetch Loading Point",
  "script": "frappe.ui.form.on('PO Form', {\n    before_save: function(frm) {  \n        update_loading_point(frm);\n    }\n});\n\nfunction update_loading_point(frm) {\n    if (!frm.doc.vehicle_details || frm.doc.vehicle_details.length === 0) {\n        return;\n    }\n\n    // Get Loading Point from the PO Form (Main Form)\n    let loading_point = frm.doc.loading_point || \"\";\n\n    // Update each row in vehicle_details\n    frm.doc.vehicle_details.forEach(row => {\n        frappe.model.set_value(row.doctype, row.name, 'loading_point', loading_point);\n    });\n\n    // Refresh the field to reflect the update in UI\n    frm.refresh_field('vehicle_details');\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 0,
  "modified": "2025-06-03 12:14:19.108434",
  "module": null,
  "name": "Client Script of Vessel Name in Stock Entry",
  "script": "frappe.ui.form.on('Stock Entry', {\n\trefresh(frm) {\n\t\t// your code here\n\t}\n})\nfrappe.ui.form.on('Stock Entry Detail', {\n    item_name: function(frm, cdt, cdn) {\n        update_item_name(frm, cdt, cdn);\n    },\n    custom_vessel_name: function(frm, cdt, cdn) {\n        update_item_name(frm, cdt, cdn);\n    }\n});\n\nfunction update_item_name(frm, cdt, cdn) {\n    let row = locals[cdt][cdn];\n    if (row.item_name && row.custom_vessel_name) {\n        row.custom_oryx_item_code = row.item_name.split(\" - \")[0] + \" - \" + row.custom_vessel_name;\n        frm.refresh_field('items');\n    }\n}\n\n\nfrappe.ui.form.on('Stock Entry Detail', {\n\trefresh(frm) {\n\t\t// your code here\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "PO Form",
  "enabled": 0,
  "modified": "2025-06-03 12:14:19.056096",
  "module": null,
  "name": "Imperial Gallon",
  "script": "frappe.ui.form.on('PO Form', {\n\trefresh(frm) {\n\t\t// your code here\n\t}\n})\n\nfrappe.ui.form.on('PO Form Item', {\n    qty: function(frm, cdt, cdn) {\n        calculate_imperial_gallon(cdt, cdn);\n    },\n    weight_bridge_wt: function(frm, cdt, cdn) {\n        calculate_imperial_gallon(cdt, cdn);\n    }\n});\n\nfunction calculate_imperial_gallon(cdt, cdn) {\n    let row = locals[cdt][cdn];\n\n    if (row.qty && row.weight_bridge_wt) {\n        let imperial_gallon = row.qty / row.weight_bridge_wt;\n        frappe.model.set_value(cdt, cdn, 'imperial_gallon', imperial_gallon);\n\n        // Calculate one_imperial_gallon\n        let one_imperial_gallon = imperial_gallon / row.weight_bridge_wt;\n        frappe.model.set_value(cdt, cdn, 'one_imperial_gallon', one_imperial_gallon);\n    } else {\n        frappe.model.set_value(cdt, cdn, 'imperial_gallon', 0);\n        frappe.model.set_value(cdt, cdn, 'one_imperial_gallon', 0);\n    }\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Delivery Note",
  "enabled": 0,
  "modified": "2025-06-03 12:14:18.891763",
  "module": null,
  "name": "Address Fetch Delivery Note",
  "script": "\nfrappe.ui.form.on('Delivery Note Item', {\n    loading_point: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n\n        if (row.loading_point) {\n            frappe.call({\n                method: \"frappe.contacts.doctype.address.address.get_address_display\",\n                args: {\n                    \"address_dict\": row.loading_point\n                },\n                callback: function(r) {\n                    if (r.message) {\n                        frappe.model.set_value(cdt, cdn, 'address_display', r.message);\n                    }\n                }\n            });\n        } else {\n            frappe.model.set_value(cdt, cdn, 'address_display', '');\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 0,
  "modified": "2025-06-03 12:14:18.856609",
  "module": null,
  "name": "Details Fetch in Sales Order",
  "script": "\nfrappe.ui.form.on('Sales Order', {\n    before_save: function(frm) {\n        if (frm.doc.custom_do_form) {\n            fetch_vehicle_details(frm);\n        }\n    }\n});\n\nfunction fetch_vehicle_details(frm) {\n    frappe.call({\n        method: 'frappe.client.get',\n        args: {\n            doctype: 'DO Form',\n            name: frm.doc.custom_do_form\n        },\n        callback: function(response) {\n            if (response.message) {\n                let do_data = response.message;\n                frm.clear_table('items');\n\n                (do_data.vehicle_details || []).forEach(vehicle_row => {\n                    (do_data.item_details || []).forEach(item_row => {\n                        let new_row = frm.add_child('items');\n\n                        // Vehicle Info\n                        \n                        // Item Info\n                        new_row.item_code = item_row.item_code;\n                        new_row.item_name = item_row.item_name;\n                        new_row.uom = item_row.uom;\n                        new_row.rate = item_row.rate;\n                        new_row.amount = item_row.amount;\n                        new_row.qty = vehicle_row.loaded_qty;  // Or item_row.qty if preferred\n                        new_row.custom_loading_uom = item_row.uom;\n\n                        // Stock Info\n                        new_row.stock_uom = item_row.stock_uom || \"\";\n                        new_row.conversion_factor = item_row.conversion_factor || 1;\n\n                        // Fallback: Fetch from Item master\n                        if (!new_row.stock_uom || !new_row.conversion_factor) {\n                            frappe.call({\n                                method: 'frappe.client.get',\n                                args: {\n                                    doctype: 'Item',\n                                    name: item_row.item_code\n                                },\n                                callback: function(item_response) {\n                                    if (item_response.message) {\n                                        frappe.model.set_value(new_row.doctype, new_row.name, 'stock_uom', item_response.message.stock_uom);\n                                        frappe.model.set_value(new_row.doctype, new_row.name, 'conversion_factor', 1);\n                                    }\n                                }\n                            });\n                        }\n                    });\n                });\n\n                frm.refresh_field('items');\n            } else {\n                frappe.msgprint(__('DO Form not found: ') + frm.doc.custom_do_form);\n            }\n        }\n    });\n}\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "DO Form",
  "enabled": 0,
  "modified": "2025-06-03 12:14:18.267060",
  "module": null,
  "name": "Create PO Form From BDR",
  "script": "// frappe.ui.form.on('DO Form', {\n// \trefresh(frm) {\n// \t\t// your code here\n// \t}\n// })\n\n\n// frappe.ui.form.on('DO Form', {\n// \trefresh(frm) {\n// \t\tfrm.add_custom_button('PO Form', () => {\n// \t\t\tfrappe.new_doc('PO Form', {\n// \t\t\t\tsupplier: frm.doc.supplier || \"\",\n// \t\t\t\ttransaction_date: frappe.datetime.nowdate(),\n// \t\t\t\tschedule_date: frappe.datetime.nowdate()\n// \t\t\t});\n// \t\t}, __('Actions'));\n// \t}\n// });\n\n// function create_PO_Form(frm) {\n//     frappe.model.with_doctype('PO Form', function() {\n//         let so = frappe.model.get_new_doc('PO Form');\n//         // so.transaction_date = frm.doc.date;\n//         // so.customer = frm.doc.customer;\n//         // so.custom_do_form = frm.doc.name;\n//         // so.po_no = frm.doc.po_no;\n//         // so.po_date = frm.doc.po_date;\n//         // so.custom_ship = frm.doc.ship_name;\n//         // so.custom_berth_no = frm.doc.berth_no;\n//         // so.delivery_date = frm.doc.delivery_date;\n//         // so.custom_mode_of_supply = frm.doc.mode_of_supply;\n//         // so.custom_arrange_surveyor = frm.doc.arrange_surveyor;\n//         frm.doc.item_details.forEach(row => {\n//             let item = frappe.model.add_child(so, 'items');\n//             item.item_code = row.item_code;\n//             item.item_name = row.item_name;\n//             item.uom = row.uom;\n//             item.qty = row.qty;\n//             item.rate = row.rate;\n//             item.schedule_date = frm.doc.date; // Default schedule date to PO Form date\n//         });\n//         frappe.set_route('Form', 'Sales Order', so.name);\n//     });\n// }\n\n\n// frappe.ui.form.on('DO Form', {\n//     refresh(frm) {\n//         frm.add_custom_button('PO Form', () => {\n//             // Create and redirect to new PO Form\n//             frappe.new_doc('PO Form', {\n//                 supplier: frm.doc.supplier || \"\",\n//                 transaction_date: frappe.datetime.nowdate(),\n//                 schedule_date: frappe.datetime.nowdate(),\n//                 custom_do_form: frm.doc.name\n//             });\n\n//             // Wait for PO Form to load before injecting items\n//             frappe.after_ajax(() => {\n//                 frappe.ui.form.on('PO Form', {\n//                     onload: function(po_frm) {\n//                         // Ensure this only runs once\n//                         if (po_frm.doc.__islocal && !po_frm._items_loaded_from_do) {\n//                             po_frm.clear_table('items');\n//                             (frm.doc.item_details || []).forEach(row => {\n//                                 let item = po_frm.add_child('items');\n//                                 item.item_code = row.item_code;\n//                                 item.item_name = row.item_name;\n//                                 item.uom = row.uom;\n//                                 item.qty = row.qty;\n//                                 item.rate = row.rate;\n//                                 item.schedule_date = frm.doc.date || frappe.datetime.nowdate();\n//                             });\n\n//                             po_frm._items_loaded_from_do = true;\n//                             po_frm.refresh_field('items');\n//                         }\n//                     }\n//                 });\n//             });\n//         }, __('Actions'));\n//     }\n// });\n\n\n// frappe.ui.form.on('DO Form', {\n//     refresh(frm) {\n//         frm.add_custom_button('PO Form', () => {\n//             frappe.new_doc('PO Form', {\n//                 supplier: frm.doc.supplier || \"\",\n//                 transaction_date: frappe.datetime.nowdate(),\n//                 schedule_date: frappe.datetime.nowdate(),\n//                 custom_do_form: frm.doc.name\n//             });\n\n//             // Now wait 500ms and fill table\n//             setTimeout(() => {\n//                 let po_frm = frappe.ui.form.get_form('PO Form');\n//                 if (po_frm) {\n//                     po_frm.clear_table('items');\n//                     (frm.doc.item_details.forEach(row => {\n//                         let item = po_frm.add_child(po_frm'items');\n//                         item.item_code = row.item_code;\n//                         item.item_name = row.item_name;\n//                         item.uom = row.uom;\n//                         item.qty = row.qty;\n//                         item.rate = row.rate;\n//                         item.schedule_date = frm.doc.date || frappe.datetime.nowdate();\n//                     });\n//                     po_frm.refresh_field('items');\n//                 }\n//             }, 500); // wait half second for PO form to load\n//         }, __('Actions'));\n//     }\n// });\n\n frappe.ui.form.on('DO Form', {\n    refresh(frm) {\n        frm.add_custom_button('Create PO Form', () => {\n            // Create new PO Form\n            frappe.model.with_doctype('PO Form', function () {\n                let po_doc = frappe.model.get_new_doc('PO Form');\n\n                // Set main fields\n                po_doc.supplier = frm.doc.supplier || \"\";\n                po_doc.transaction_date = frappe.datetime.nowdate();\n                po_doc.schedule_date = frappe.datetime.nowdate();\n                po_doc.custom_do_form = frm.doc.name;\n\n                po_doc.loading_date = frm.doc.delivery_date || \"\";\n                po_doc.date = frm.doc.date || \"\";\n                po_doc.loading_time = frm.doc.delivery_time || \"\";\n                po_doc.collection_status = frm.doc.delivery_status || \"\";\n                po_doc.port = frm.doc.port_address || \"\";\n\n                // Map item_details child table\n                (frm.doc.item_details || []).forEach(row => {\n                    const child = frappe.model.add_child(po_doc, 'item_details');\n                    child.item_code = row.item_code;\n                    child.item_name = row.item_name;\n                    child.uom = row.uom;\n                    child.qty = row.qty;\n                    child.rate = row.rate;\n                    child.delivery_qty = row.delivery_qty;\n                });\n\n                // Map vehicle_details child table\n                (frm.doc.vehicle_details || []).forEach(row => {\n                    const child = frappe.model.add_child(po_doc, 'vehicle_details');\n                    child.vehicle = row.vehicle;\n                    child.driver = row.driver;\n                    child.driver_name = row.driver_name;\n                    child.loaded_qty = row.loaded_qty;\n                    child.uom = row.uom,\n                    child.meter_reading = row.meter_reading,\n                    child.before_loading = row.before_loading,\n                    child.meter_readingal = row.meter_readingal,\n                    child.after_loading = row.after_loading,\n                    child.net_weight = row.net_weight,\n                    child.loading_point = frm.doc.port_address || \"\"; \n                });\n\n                // Navigate to new form\n                frappe.set_route('Form', 'PO Form', po_doc.name);\n            });\n        }, __('Actions'));\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Delivery Note",
  "enabled": 0,
  "modified": "2025-06-19 09:20:49.982146",
  "module": "Oryx",
  "name": "Calculation Based on Selling UOM",
  "script": "frappe.ui.form.on('Delivery Note', {\n\trefresh(frm) {\n\t\t// your code here\n\t}\n})\nfrappe.ui.form.on('Delivery Note Item', {\n    custom_converted_qty: calculate_converted_qty,\n    custom_density: calculate_converted_qty,\n    custom_selling_uom: calculate_converted_qty\n});\n\nfunction calculate_converted_qty(frm, cdt, cdn) {\n    const row = locals[cdt][cdn];\n    const qty_mt = flt(row.custom_converted_qty);     // Metric Tons input\n    const density = flt(row.custom_density);          // Density in kg/L\n    const unit = (row.custom_selling_uom || \"\").trim();       // Stock UOM: \"Liter\", \"Gallon(UK)\", \"CBM\"\n\n    if (!qty_mt || !unit) {\n        frappe.model.set_value(cdt, cdn, \"qty\", 0);\n        return;\n    }\n\n    if (!density) {\n        frappe.msgprint(\"Density is required for volume conversions.\");\n        frappe.model.set_value(cdt, cdn, \"qty\", 0);\n        return;\n    }\n\n    // Convert Metric Tons to Liters first\n    // const liters = (qty_mt * 1000) / density;\n    const liters = (qty_mt*density)/1000;\n\n    let qty_in_stock_uom = 0;\n    if (unit === \"Litre\") {\n        qty_in_stock_uom = liters;\n    } else if (unit === \"Gallon (UK)\") {\n        // qty_in_stock_uom = qty_mt / 4.546;\n        qty_in_stock_uom = (qty_mt * 4.546 * density)/1000 ;\n    } else if (unit === \"CBM\") {\n        // qty_in_stock_uom = qty_mt / 1000;\n        qty_in_stock_uom = (qty_mt * density) ;\n    } else {\n        frappe.msgprint(`Unknown UOM: ${unit}`);\n        frappe.model.set_value(cdt, cdn, \"qty\", 0);\n        return;\n    }\n\n    frappe.model.set_value(cdt, cdn, \"qty\", qty_in_stock_uom.toFixed(3));\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 0,
  "modified": "2025-06-19 09:20:50.004939",
  "module": "Oryx",
  "name": "Calculation based On UOM Sales Order",
  "script": "// frappe.ui.form.on('Sales Order', {\n// \trefresh(frm) {\n// \t\t// your code here\n// \t}\n// })\n\n// frappe.ui.form.on('Sales Order Item', {\n// \trefresh(frm) {\n// \t\t// your code here\n// \t}\n// })\n\n\nfrappe.ui.form.on('Sales Order Item', {\n    custom_converted_qty: calculate_converted_qty,\n    custom_density: calculate_converted_qty,\n    custom_selling_uom: calculate_converted_qty\n});\n\nfunction calculate_converted_qty(frm, cdt, cdn) {\n    const row = locals[cdt][cdn];\n    const qty_mt = flt(row.custom_converted_qty);     // Metric Tons input\n    const density = flt(row.custom_density);          // Density in kg/L\n    const unit = (row.custom_selling_uom || \"\").trim();       // Stock UOM: \"Liter\", \"Gallon(UK)\", \"CBM\"\n\n    if (!qty_mt || !unit) {\n        frappe.model.set_value(cdt, cdn, \"qty\", 0);\n        return;\n    }\n\n    if (!density) {\n        frappe.msgprint(\"Density is required for volume conversions.\");\n        frappe.model.set_value(cdt, cdn, \"qty\", 0);\n        return;\n    }\n\n    // Convert Metric Tons to Liters first\n    // const liters = (qty_mt * 1000) / density;\n    const liters = (qty_mt*density)/1000;\n\n    let qty_in_stock_uom = 0;\n    if (unit === \"Litre\") {\n        qty_in_stock_uom = liters;\n    } else if (unit === \"Gallon (UK)\") {\n        // qty_in_stock_uom = qty_mt / 4.546;\n        qty_in_stock_uom = (qty_mt * 4.546 * density)/1000 ;\n    } else if (unit === \"CBM\") {\n        // qty_in_stock_uom = qty_mt / 1000;\n        qty_in_stock_uom = (qty_mt * density) ;\n    } else {\n        frappe.msgprint(`Unknown UOM: ${unit}`);\n        frappe.model.set_value(cdt, cdn, \"qty\", 0);\n        return;\n    }\n\n    frappe.model.set_value(cdt, cdn, \"qty\", qty_in_stock_uom.toFixed(3));\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 0,
  "modified": "2025-06-19 09:20:50.030656",
  "module": "Oryx",
  "name": "Calculation Based On UOM in Purchase Order",
  "script": "// frappe.ui.form.on('Purchase Order', {\n// \trefresh(frm) {\n// \t\t// your code here\n// \t}\n// })\n\n// frappe.ui.form.on('Purchase Order Item', {\n// \trefresh(frm) {\n// \t\t// your code here\n// \t}\n// })\n\n\nfrappe.ui.form.on('Purchase Order Item', {\n    custom_converted_qty: calculate_converted_qty,\n    custom_density: calculate_converted_qty,\n    custom_selling_uom: calculate_converted_qty\n});\n\nfunction calculate_converted_qty(frm, cdt, cdn) {\n    const row = locals[cdt][cdn];\n    const qty_mt = flt(row.custom_converted_qty);     // Metric Tons input\n    const density = flt(row.custom_density);          // Density in kg/L\n    const unit = (row.custom_selling_uom || \"\").trim();       // Stock UOM: \"Liter\", \"Gallon(UK)\", \"CBM\"\n\n    if (!qty_mt || !unit) {\n        frappe.model.set_value(cdt, cdn, \"qty\", 0);\n        return;\n    }\n\n    if (!density) {\n        frappe.msgprint(\"Density is required for volume conversions.\");\n        frappe.model.set_value(cdt, cdn, \"qty\", 0);\n        return;\n    }\n\n    // Convert Metric Tons to Liters first\n    // const liters = (qty_mt * 1000) / density;\n    const liters = (qty_mt*density)/1000;\n\n    let qty_in_stock_uom = 0;\n    if (unit === \"Litre\") {\n        qty_in_stock_uom = liters;\n    } else if (unit === \"Gallon (UK)\") {\n        // qty_in_stock_uom = qty_mt / 4.546;\n        qty_in_stock_uom = (qty_mt * 4.546 * density)/1000 ;\n    } else if (unit === \"CBM\") {\n        // qty_in_stock_uom = qty_mt / 1000;\n        qty_in_stock_uom = (qty_mt * density) ;\n    } else {\n        frappe.msgprint(`Unknown UOM: ${unit}`);\n        frappe.model.set_value(cdt, cdn, \"qty\", 0);\n        return;\n    }\n\n    frappe.model.set_value(cdt, cdn, \"qty\", qty_in_stock_uom.toFixed(3));\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "enabled": 0,
  "modified": "2025-06-19 09:20:50.056757",
  "module": "Oryx",
  "name": "Calculation Based On UOM in Purchase Reciept",
  "script": "// frappe.ui.form.on('Purchase Receipt', {\n// \trefresh(frm) {\n// \t\t// your code here\n// \t}\n// })\n\n// frappe.ui.form.on('Purchase Receipt Item', {\n// \trefresh(frm) {\n// \t\t// your code here\n// \t}\n// })\n\nfrappe.ui.form.on('Purchase Receipt Item', {\n    custom_converted_qty: calculate_converted_qty,\n    custom_density: calculate_converted_qty,\n    custom_selling_uom: calculate_converted_qty\n});\n\nfunction calculate_converted_qty(frm, cdt, cdn) {\n    const row = locals[cdt][cdn];\n    const qty_mt = flt(row.custom_converted_qty);     // Metric Tons input\n    const density = flt(row.custom_density);          // Density in kg/L\n    const unit = (row.custom_selling_uom || \"\").trim();       // Stock UOM: \"Liter\", \"Gallon(UK)\", \"CBM\"\n\n    if (!qty_mt || !unit) {\n        frappe.model.set_value(cdt, cdn, \"qty\", 0);\n        return;\n    }\n\n    if (!density) {\n        frappe.msgprint(\"Density is required for volume conversions.\");\n        frappe.model.set_value(cdt, cdn, \"qty\", 0);\n        return;\n    }\n\n    // Convert Metric Tons to Liters first\n    // const liters = (qty_mt * 1000) / density;\n    const liters = (qty_mt*density)/1000;\n\n    let qty_in_stock_uom = 0;\n    if (unit === \"Litre\") {\n        qty_in_stock_uom = liters;\n    } else if (unit === \"Gallon (UK)\") {\n        // qty_in_stock_uom = qty_mt / 4.546;\n        qty_in_stock_uom = (qty_mt * 4.546 * density)/1000 ;\n    } else if (unit === \"CBM\") {\n        // qty_in_stock_uom = qty_mt / 1000;\n        qty_in_stock_uom = (qty_mt * density) ;\n    } else {\n        frappe.msgprint(`Unknown UOM: ${unit}`);\n        frappe.model.set_value(cdt, cdn, \"qty\", 0);\n        return;\n    }\n\n    frappe.model.set_value(cdt, cdn, \"qty\", qty_in_stock_uom.toFixed(3));\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 0,
  "modified": "2025-06-19 09:20:50.083016",
  "module": "Oryx",
  "name": "Rate Calculation In Sales Order",
  "script": "// frappe.ui.form.on('Sales Order', {\n// \trefresh(frm) {\n// \t\t// your code here\n// \t}\n// })\n\n// frappe.ui.form.on('Sales Order Item', {\n// \trefresh(frm) {\n// \t\t// your code here\n// \t}\n// })\n\nfrappe.ui.form.on('Sales Order Item', {\n    custom_converted_qty: calculate_converted_amount,\n    custom_rate: calculate_converted_amount\n});\n\nfunction calculate_converted_amount(frm, cdt, cdn) {\n    let row = locals[cdt][cdn];\n\n    let qty = row.custom_converted_qty;\n    let rate = row.custom_rate;\n\n    if (qty && rate) {\n        frappe.model.set_value(cdt, cdn, 'converted_amount', qty * rate);\n    } else {\n        frappe.model.set_value(cdt, cdn, 'converted_amount', 0);\n    }\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Delivery Note",
  "enabled": 0,
  "modified": "2025-06-19 09:20:50.111066",
  "module": "Oryx",
  "name": "Rate Calculation In Delivery Note",
  "script": "// frappe.ui.form.on('Delivery Note', {\n// \trefresh(frm) {\n// \t\t// your code here\n// \t}\n// })\n\n// frappe.ui.form.on('Delivery Note Item', {\n// \trefresh(frm) {\n// \t\t// your code here\n// \t}\n// })\n\nfrappe.ui.form.on('Delivery Note Item', {\n    custom_converted_qty: calculate_converted_amount,\n    custom_rate: calculate_converted_amount\n});\n\nfunction calculate_converted_amount(frm, cdt, cdn) {\n    let row = locals[cdt][cdn];\n\n    let qty = row.custom_converted_qty;\n    let rate = row.custom_rate;\n\n    if (qty && rate) {\n        frappe.model.set_value(cdt, cdn, 'converted_amount', qty * rate);\n    } else {\n        frappe.model.set_value(cdt, cdn, 'converted_amount', 0);\n    }\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 0,
  "modified": "2025-06-19 09:20:50.136734",
  "module": "Oryx",
  "name": "Rate Calculation In Purchase Order",
  "script": "// frappe.ui.form.on('Purchase Order', {\n// \trefresh(frm) {\n// \t\t// your code here\n// \t}\n// })\n\n\n\n// frappe.ui.form.on('Purchase Order Item', {\n// \trefresh(frm) {\n// \t\t// your code here\n// \t}\n// })\n\nfrappe.ui.form.on('Purchase Order Item', {\n    custom_converted_qty: calculate_converted_amount,\n    custom_rate: calculate_converted_amount\n});\n\nfunction calculate_converted_amount(frm, cdt, cdn) {\n    let row = locals[cdt][cdn];\n\n    let qty = row.custom_converted_qty;\n    let rate = row.custom_rate;\n\n    if (qty && rate) {\n        frappe.model.set_value(cdt, cdn, 'converted_amount', qty * rate);\n    } else {\n        frappe.model.set_value(cdt, cdn, 'converted_amount', 0);\n    }\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "enabled": 0,
  "modified": "2025-06-19 09:20:50.165930",
  "module": "Oryx",
  "name": "Rate Calculation In Purchase Receipt",
  "script": "// frappe.ui.form.on('Purchase Receipt', {\n// \trefresh(frm) {\n// \t\t// your code here\n// \t}\n// })\n\n// frappe.ui.form.on('Purchase Receipt Item', {\n// \trefresh(frm) {\n// \t\t// your code here\n// \t}\n// })\n\nfrappe.ui.form.on('Purchase Receipt Item', {\n    custom_converted_qty: calculate_converted_amount,\n    custom_rate: calculate_converted_amount\n});\n\nfunction calculate_converted_amount(frm, cdt, cdn) {\n    let row = locals[cdt][cdn];\n\n    let qty = row.custom_converted_qty;\n    let rate = row.custom_rate;\n\n    if (qty && rate) {\n        frappe.model.set_value(cdt, cdn, 'converted_amount', qty * rate);\n    } else {\n        frappe.model.set_value(cdt, cdn, 'converted_amount', 0);\n    }\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Delivery Note",
  "enabled": 1,
  "modified": "2025-06-19 09:20:50.218754",
  "module": "Oryx",
  "name": "UOM Conversion DN",
  "script": "frappe.ui.form.on('Delivery Note Item', {\n    custom_density: function(frm, cdt, cdn) {\n        set_conversion_factor(frm, cdt, cdn);\n    },\n    uom: function(frm, cdt, cdn) {\n        set_conversion_factor(frm, cdt, cdn);\n    },\n    stock_uom: function(frm, cdt, cdn) {\n        set_conversion_factor(frm, cdt, cdn);\n    }\n});\n\nfunction set_conversion_factor(frm, cdt, cdn) {\n    let row = locals[cdt][cdn];\n\n    if (!row.custom_density || !row.uom || !row.stock_uom) return;\n\n    let factor = 1;\n\n    if (row.stock_uom === 'Litre' && row.uom === 'Metric Ton') {\n        factor = 1000 / row.custom_density;\n    } \n    else if (row.stock_uom === 'Metric Ton' && row.uom === 'Litre') {\n        factor = row.custom_density / 1000;\n    }\n\n    row.conversion_factor = factor;\n    frm.refresh_field(\"items\");\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "enabled": 1,
  "modified": "2025-06-19 09:20:50.195126",
  "module": "Oryx",
  "name": "UOM Conversion PR",
  "script": "frappe.ui.form.on('Purchase Receipt Item', {\n    custom_density: function(frm, cdt, cdn) {\n        set_conversion_factor(frm, cdt, cdn);\n    },\n    uom: function(frm, cdt, cdn) {\n        set_conversion_factor(frm, cdt, cdn);\n    },\n    stock_uom: function(frm, cdt, cdn) {\n        set_conversion_factor(frm, cdt, cdn);\n    }\n});\n\nfunction set_conversion_factor(frm, cdt, cdn) {\n    let row = locals[cdt][cdn];\n\n    if (!row.custom_density || !row.uom || !row.stock_uom) return;\n\n    let factor = 1;\n\n    if (row.stock_uom === 'Litre' && row.uom === 'Metric Ton') {\n        // Metric Ton → Litre\n        factor = 1000 / row.custom_density;\n    } \n    else if (row.stock_uom === 'Metric Ton' && row.uom === 'Litre') {\n        // Litre → Metric Ton\n        factor = row.custom_density / 1000;\n    }\n\n    row.conversion_factor = factor;\n    frm.refresh_field(\"items\");\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2025-06-19 09:20:49.956419",
  "module": "Oryx",
  "name": "UOM Conversion SO",
  "script": "frappe.ui.form.on('Sales Order', {\n\trefresh(frm) {\n\t\t// your code here\n\t}\n})\nfrappe.ui.form.on('Sales Order Item', {\n    custom_density: function(frm, cdt, cdn) {\n        set_conversion_factor(frm, cdt, cdn);\n    },\n    uom: function(frm, cdt, cdn) {\n        set_conversion_factor(frm, cdt, cdn);\n    },\n    stock_uom: function(frm, cdt, cdn) {\n        set_conversion_factor(frm, cdt, cdn);\n    }\n});\n\nfunction set_conversion_factor(frm, cdt, cdn) {\n    let row = locals[cdt][cdn];\n\n    if (!row.custom_density || !row.uom || !row.stock_uom) return;\n\n    let factor = 1;\n\n    if (row.stock_uom === 'Litre' && row.uom === 'Metric Ton') {\n        factor = 1000 / row.custom_density;\n    } \n    else if (row.stock_uom === 'Metric Ton' && row.uom === 'Litre') {\n        factor = row.custom_density / 1000;\n    }\n\n    row.conversion_factor = factor;\n    frm.refresh_field(\"items\");\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2025-06-19 09:20:49.928650",
  "module": "Oryx",
  "name": "UOM Conversion PO",
  "script": "frappe.ui.form.on('Purchase Order', {\n\trefresh(frm) {\n\t\t// your code here\n\t}\n})\nfrappe.ui.form.on('Purchase Order Item', {\n    custom_density: function(frm, cdt, cdn) {\n        set_conversion_factor(frm, cdt, cdn);\n    },\n    uom: function(frm, cdt, cdn) {\n        set_conversion_factor(frm, cdt, cdn);\n    },\n    stock_uom: function(frm, cdt, cdn) {\n        set_conversion_factor(frm, cdt, cdn);\n    },\n    validate: function(frm, cdt, cdn) {\n        set_conversion_factor(frm, cdt, cdn);\n    }\n});\n\nfunction set_conversion_factor(frm, cdt, cdn) {\n    let row = locals[cdt][cdn];\n\n    if (!row.custom_density || !row.uom || !row.stock_uom) return;\n\n    let factor = 1;\n\n    if (row.stock_uom === 'Litre' && row.uom === 'Metric Ton') {\n        factor = 1000 / row.custom_density;\n    } \n    else if (row.stock_uom === 'Metric Ton' && row.uom === 'Litre') {\n        factor = row.custom_density / 1000;\n    }\n\n    row.conversion_factor = factor;\n    frm.refresh_field(\"items\");\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Project",
  "enabled": 1,
  "modified": "2025-06-19 09:20:49.441480",
  "module": "Oryx",
  "name": "Stock Reconciliation from Project",
  "script": "frappe.ui.form.on('Project', {\n    refresh: function(frm) {\n        frm.add_custom_button(__('Create Stock Reconciliation'), function() {\n            frappe.new_doc('Stock Reconciliation', {\n                custom_bunker_supply: frm.doc.name  // assuming 'project' is a custom link field in Stock Reconciliation\n            });\n        }, __('Create'));\n    }\n});\n// frappe.ui.form.on('Bunker supply', {\n//     refresh: function(frm) {\n//         if (frm.doc.custom_stock_reconciliation) {\n//             // If already created, show \"View\" button\n//             frm.add_custom_button(__('View Stock Reconciliation'), function() {\n//                 frappe.set_route('Form', 'Stock Reconciliation', frm.doc.custom_stock_reconciliation);\n//             }, __('Stock'));\n//         } else {\n//             // Show \"Create\" button\n//             frm.add_custom_button(__('Create Stock Reconciliation'), function() {\n//                 frappe.call({\n//                     method: 'frappe.client.insert',\n//                     args: {\n//                         doc: {\n//                             doctype: 'Stock Reconciliation',\n//                             custom_bunker_supply: frm.doc.name  // Link field in Stock Reconciliation\n//                         }\n//                     },\n//                     callback: function(r) {\n//                         if (!r.exc) {\n//                             frappe.msgprint(__('Stock Reconciliation {0} created', [r.message.name]));\n//                             frm.set_value('custom_stock_reconciliation', r.message.name);\n//                             frm.save();  // Save the link to Bunker Supply\n//                             frappe.set_route('Form', 'Stock Reconciliation', r.message.name);\n//                         }\n//                     }\n//                 });\n//             }, __('Stock'));\n//         }\n//     }\n// });\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Delivery Note",
  "enabled": 1,
  "modified": "2025-06-19 09:20:49.906884",
  "module": "Oryx",
  "name": "Button For creating Oryx Delivery Plan",
  "script": "// frappe.ui.form.on('Delivery Note', {\n// \trefresh(frm) {\n// \t\t// your code here\n// \t}\n// })\n\nfrappe.ui.form.on('Delivery Note', {\n    refresh(frm) {\n        if (!frm.is_new() && frm.doc.docstatus === 1) {\n            frm.add_custom_button('Oryx Delivery Plan', () => {\n                frappe.model.with_doctype('Oryx Delivery Plan', () => {\n                    // Create a new Oryx Delivery Plan document\n                    let doc = frappe.model.get_new_doc('Oryx Delivery Plan');\n\n                    // Set main fields\n                    doc.delivery_note = frm.doc.name;\n                    doc.customer = frm.doc.customer;\n                    doc.company = frm.doc.company;\n                    doc.posting_date = frm.doc.posting_date;\n                    doc.posting_time = frm.doc.posting_time;\n\n                    // Populate child table items from Delivery Note items\n                    (frm.doc.items || []).forEach(item => {\n                        let row = frappe.model.add_child(doc, 'Oryx Delivery Plan', 'items');\n                        row.item_code = item.item_code;\n                        // You can add more fields if needed, e.g.:\n                        // row.qty = item.qty;\n                        // row.uom = item.uom;\n                        // row.description = item.description;\n                    });\n\n                    // Open the new document\n                    frappe.set_route('Form', 'Oryx Delivery Plan', doc.name);\n                });\n            }, 'Create');\n        }\n    }\n});\n\n",
  "view": "Form"
 }
]